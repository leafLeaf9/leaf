<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!--由于 logback在 application.properties之前加载，所以无法读取 application.properties 中的变量，此时需要使用 springProperty属性-->
	<springProperty scope="context" name="appname" source="logback.appname"/>
	<springProperty scope="context" name="logdir" source="logback.logdir"/>
	<contextName>${appname}</contextName>
	<!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
	<!--输出到控制台 ConsoleAppender-->
    <appender name="ConsoleInfoLog" class="ch.qos.logback.core.ConsoleAppender">
    	<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
             <level>debug</level>
        </filter> 
        <!--展示格式 layout-->
        <encoder>
                <pattern>%d{yyyy-MM-dd HH:mm:ss} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
<!--                 <pattern>%black(控制台-) %red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{10}) - %cyan(%msg%n)</pattern> -->
                <charset>UTF-8</charset>
        </encoder>
<!--         ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中 -->
        <!--
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
             <level>ERROR</level>
        </filter>
         -->
    </appender>
    <appender name="FileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
    	<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则,如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
                         的日志改名为今天的日期。即，<File> 的日志都是当天的。-->
    	<File>${logdir}/${appname}.log</File>
    	<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
    	<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
        <FileNamePattern>${logdir}/${appname}.%d{yyyy-MM-dd}.log</FileNamePattern>
        <!--只保留最近90天的日志-->
        <maxHistory>180</maxHistory>
		<!--单个日志文件最大值，达到之后就进行切割 -->
<!--         <maxFileSize>52MB</maxFileSize> -->
        <!--用来指定日志文件总体的最大值，到了这个值，就会删除旧的日志-->
        <totalSizeCap>2GB</totalSizeCap>
   		</rollingPolicy>
    	<!--日志输出编码格式化-->
   		<encoder>
        <charset>UTF-8</charset>
        <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>
    	</encoder>
	</appender>
	
    <!-- <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>
	name:用来指定受此loger约束的某一个包或者具体的某一个类。
	<loger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。
	level:用来设置打印级别，大小写无关。如果未设置此属性，那么当前loger将会继承上级的级别。
	addtivity:是否向上级loger传递打印信息。默认是true。 -->
    <logger name="com.gousade.controller" level="WARN" additivity="false">
        <appender-ref ref="ConsoleInfoLog"/>
    </logger>
    
    <!--此处和application.properties中的logging.level.com.gousade.mapper=debug只需配置一个即可，作用相同，使得控制台和日志可以打印sql-->
    <logger name="com.gousade.mapper" level="debug" additivity="false">
        <appender-ref ref="ConsoleInfoLog"/>
        <appender-ref ref="FileInfoLog"/>
    </logger>
    
    <!--指定最基础的日志输出级别-->
    <root level="INFO">
        <!--appender将会添加到这个loger-->
        <appender-ref ref="ConsoleInfoLog"/>
        <appender-ref ref="FileInfoLog"/>
    </root>

</configuration>